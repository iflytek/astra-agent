services:
  db:
    image: mysql:8.4
    container_name: astron-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-astron-root}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-astron_console}
      MYSQL_USER: ${MYSQL_USER:-astron}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-astron-dev-env-db}
      TZ: Asia/Shanghai
    command: ["--character-set-server=utf8mb4", "--collation-server=utf8mb4_unicode_ci"]
    ports:
      - "3306:3306"
    volumes:
      - ./mysql/data:/var/lib/mysql
      # If initialization scripts are needed, place .sql files in ./mysql/init and uncomment the next line
      # - ./mysql/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -uroot -p $MYSQL_ROOT_PASSWORD || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - astron-agent-net


  redis:
    image: redis:7-alpine
    container_name: astron-redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - ./redis/data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - astron-agent-net

  minio:
    image: minio/minio:latest
    container_name: astron-minio
    restart: unless-stopped
    command: ["server", "/data", "--console-address", ":9001"]
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      TZ: Asia/Shanghai
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio/data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - astron-agent-net

  minio-init:
    image: minio/mc:latest
    container_name: astron-minio-init
    restart: "no"
    depends_on:
      - minio
    environment:
      TZ: Asia/Shanghai
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      S3_BUCKET: ${S3_BUCKET:-astron-agent}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-astron-uploader}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-astron-uploader-secret}
    entrypoint: ["sh", "-c"]
    command: |
      "set -e
      echo 'Waiting for MinIO to be ready...'
      until (mc alias set local http://minio:9000 "$MINIO_ROOT_USER" "$MINIO_ROOT_PASSWORD"); do
        echo 'MinIO not ready yet, retrying in 2s...';
        sleep 2;
      done;
      echo 'MinIO is ready. Creating bucket and user/policy...';
      mc mb -p local/"$S3_BUCKET" || true;
      mc admin user add local "$S3_ACCESS_KEY" "$S3_SECRET_KEY" || true;
      cat > /tmp/uploader-policy.json <<EOF
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:PutObject",
              "s3:AbortMultipartUpload",
              "s3:ListMultipartUploadParts",
              "s3:CreateMultipartUpload"
            ],
            "Resource": [
              "arn:aws:s3:::${S3_BUCKET}/*"
            ]
          }
        ]
      }
      EOF
      mc admin policy create local uploader-writer /tmp/uploader-policy.json || true;
      mc admin policy attach local uploader-writer --user "$S3_ACCESS_KEY" || true;
      echo 'MinIO initialization completed.'"
    networks:
      - astron-agent-net

  # auth:
  #   build:
  #     context: ..
  #     dockerfile: auth/Dockerfile
  #   container_name: astron-auth
  #   restart: unless-stopped
  #   depends_on:
  #     - db
  #     - redis
  #     - minio
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=default
  #   ports:
  #     - "8081:8081"
  #   networks:
  #     - astron-agent-net

  # hub:
  #   build:
  #     context: ..
  #     dockerfile: hub/Dockerfile
  #   container_name: console-hub
  #   restart: unless-stopped
  #   depends_on:
  #     - db
  #     - redis
  #     - minio
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=default
  #     - S3_ACCESS_KEY=${S3_ACCESS_KEY:-astron-uploader}
  #     - S3_SECRET_KEY=${S3_SECRET_KEY:-astron-uploader-secret}
  #     - S3_BUCKET=${S3_BUCKET:-astron-agent}
  #   ports:
  #     - "8080:8080"
  #   networks:
  #     - astron-agent-net


networks:
  astron-agent-net:
    driver: bridge